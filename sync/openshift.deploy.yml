apiVersion: template.openshift.io/v1
kind: Template
parameters:
  - name: NAME
    description: Module name
    value: nr-spar-data
  - name: COMPONENT
    description: Component name
    value: sync
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "25m"
  - name: MEMORY_REQUEST
    value: "50Mi"
  - name: CPU_LIMIT
    value: "75m"
  - name: MEMORY_LIMIT
    value: "150Mi"
  - name: CPU_REQUEST_INIT
    value: "125m"
  - name: MEMORY_REQUEST_INIT
    value: "100Mi"
  - name: CPU_LIMIT_INIT
    value: "250m"
  - name: MEMORY_LIMIT_INIT
    value: "250Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "1"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "1"
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-spar-data/sync:test
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: "${IMAGE_TAG}"
          from:
            kind: DockerImage
            name: "${REGISTRY}/${PROMOTE}"
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}"
            from:
              kind: ImageStreamTag
              name: "${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}"
      selector:
        deploymentconfig: "${NAME}-${ZONE}-${COMPONENT}"
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: "${NAME}-${ZONE}"
            deploymentconfig: "${NAME}-${ZONE}-${COMPONENT}"
        spec:
          containers:
            - image: "${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}"
              imagePullPolicy: Always
              name: "${NAME}"
              env:
                - name: POSTGRES_HOST
                  value: "${NAME}-${ZONE}-database:5432"
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-${ZONE}-database"
                      key: database-user
                - name: PYTHONPATH
                  value: /application/app/src
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 2
                timeoutSeconds: 2
                successThreshold: 1
                failureThreshold: 30
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: "${NAME}-${ZONE}-${COMPONENT}"
      minReplicas: "${{MIN_REPLICAS}}"
      maxReplicas: "${{MAX_REPLICAS}}"
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100
